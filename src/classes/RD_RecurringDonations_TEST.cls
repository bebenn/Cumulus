/*
    Copyright (c) 2012, Salesforce.org
    All rights reserved. 
    
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
    
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Salesforce.org nor the names of
      its contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.
 
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
    COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
    POSSIBILITY OF SUCH DAMAGE.
*/
/**
* @author Salesforce.org
* @date 2012 (2.0)
* @group Recurring Donations
* @description Test class for the RecurringDonations class
*/
@isTest
public class RD_RecurringDonations_TEST {

    /*******************************************************************************************************
    * @description test method for insertOpportunities function 
    */ 
    static testMethod void insertOpportunities()
    {

        UTIL_Debug.debug('multiply: ' + system.label.npe03.RecurringDonationMultiplyValue);
        UTIL_Debug.debug('divide: ' + system.label.npe03.RecurringDonationDivideValue);
        Account a = new Account();
        a.Name = 'insertOpportunities';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;
        
        //added to cover
        npe03__Custom_Field_Mapping__c cfm = new npe03__Custom_Field_Mapping__c(
        npe03__Recurring_Donation_Field__c = 'Name',
        npe03__Opportunity_Field__c = 'Description',
        Name = 'CFMName00001-Test'
        );
        insert cfm;

        npe03__Recurring_Donation__c r0 = new npe03__Recurring_Donation__c();
        r0.Name = 'insertOpportunities';
        r0.npe03__Installments__c = 3;
        r0.npe03__Amount__c = 100;
        r0.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodYearly;
        r0.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r0.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        try {
            insert r0;
        } catch (Exception e) {
            ERR_Handler.processError(e, ERR_Handler_API.Context.RD);
        }
        //insert should fail because there is no Contact
        system.assertEquals(null,r0.id);
        

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'insertOpportunities2';
        r1.npe03__Installments__c = 2;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodYearly;
        r1.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = 'None'; 
        insert r1;
        
        Opportunity[] installments1 = [select Name,amount,accountid,CloseDate,Description from Opportunity where npe03__Recurring_Donation__c = :r1.id order by CloseDate];
        system.assertEquals(2,installments1.size());
        system.assertEquals(100,installments1[0].Amount);
        system.assertEquals(date.newinstance(1970,6,12),installments1[0].CloseDate);
        system.assertEquals(a.id,installments1[0].AccountId);
        system.assertEquals(100,installments1[1].Amount);
        system.assertEquals(date.newinstance(1971,6,12),installments1[1].CloseDate);
        system.assertEquals(a.id,installments1[1].AccountId);
        system.assertNotEquals(null, installments1[0].Description);
        system.assertNotEquals(null, installments1[1].Description);
        UTIL_Debug.debug('****' + installments1);        
    }
    
    static testMethod void insertWeeklyOpportunities()
    {

         Account a = new Account();
        a.Name = 'insertWeeklyOpportunities';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;       

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'insertWeeklyOpportunities';
        r1.npe03__Installments__c = 2;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodWeekly;
        r1.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = 'None'; 
        insert r1;
        
        Opportunity[] installments1 = [select Name,amount,accountid,CloseDate from Opportunity where npe03__Recurring_Donation__c = :r1.id order by CloseDate];
        system.assertEquals(2,installments1.size());
        system.assertEquals(100,installments1[0].Amount);
        system.assertEquals(date.newinstance(1970,6,12),installments1[0].CloseDate);
        system.assertEquals(a.id,installments1[0].AccountId);
        system.assertEquals(100,installments1[1].Amount);
        system.assertEquals(date.newinstance(1970,6,19),installments1[1].CloseDate);
        system.assertEquals(a.id,installments1[1].AccountId);
    }
    
    static testMethod void insertQuarterlyOpportunities()
    {

         Account a = new Account();
        a.Name = 'insertQuarterlyOpportunities';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;       

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'insertQuarterlyOpportunities';
        r1.npe03__Installments__c = 2;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodQuarterly;
        r1.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = 'None'; 
        insert r1;
        
        Opportunity[] installments1 = [select Name,amount,accountid,CloseDate from Opportunity where npe03__Recurring_Donation__c = :r1.id order by CloseDate];
        system.assertEquals(2,installments1.size());
        system.assertEquals(100,installments1[0].Amount);
        system.assertEquals(date.newinstance(1970,6,12),installments1[0].CloseDate);
        system.assertEquals(a.id,installments1[0].AccountId);
        system.assertEquals(100,installments1[1].Amount);
        system.assertEquals(date.newinstance(1970,9,12),installments1[1].CloseDate);
        system.assertEquals(a.id,installments1[1].AccountId);
    }
    
    static testMethod void insertCampaignOpportunities() {

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(new npe03__Recurring_Donations_Settings__c());    
        Account a = new Account();
        a.Name = 'insertCampaignOpportunities';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;       

        Campaign camp = new Campaign();
        camp.Name = 'insertCampaignOpportunities';
        insert camp;
        
        Id campaignId = camp.id;

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'insertCampaignOpportunities';
        r1.npe03__Installments__c = 2;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodWeekly;
        r1.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Recurring_Donation_Campaign__c = campaignId;
        r1.npe03__Open_Ended_Status__c = 'None'; 
        insert r1;
        
        Opportunity[] installments1 = [select Name,amount,accountid,CloseDate,CampaignId from Opportunity where npe03__Recurring_Donation__c = :r1.id order by CloseDate];
        system.assertEquals(2,installments1.size());
        system.assertEquals(100,installments1[0].Amount);
        system.assertEquals(date.newinstance(1970,6,12),installments1[0].CloseDate);
        system.assertEquals(campaignId,installments1[0].CampaignId);
        system.assertEquals(a.id,installments1[0].AccountId);
        system.assertEquals(100,installments1[1].Amount);
        system.assertEquals(date.newinstance(1970,6,19),installments1[1].CloseDate);
        system.assertEquals(campaignId,installments1[0].CampaignId);
        system.assertEquals(a.id,installments1[1].AccountId);
    }
    
    static testMethod void deleteRecurringDonation()
    {

        Account a = new Account();
        a.Name = 'deleteRecurringDonation';
        insert a;
        
        npe03__Recurring_Donation__c r2 = new npe03__Recurring_Donation__c();
        r2.Name = 'deleteRecurringDonation';
        r2.npe03__Installments__c = 3;
        r2.npe03__Organization__c = a.Id;
        r2.npe03__Amount__c = 100;
        r2.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodMonthly;
        r2.npe03__Date_Established__c = date.newinstance(1970,6,30);
        r2.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationDivideValue;
        r2.npe03__Open_Ended_Status__c = 'None'; 
        insert r2;
        
        Opportunity[] installments2 = [select Name,amount,accountid,CloseDate from Opportunity where npe03__Recurring_Donation__c = :r2.id];
        system.assertEquals(3,installments2.size());
        system.assertEquals(33.33,installments2[0].Amount);
        system.assertEquals(date.newinstance(1970,6,30),installments2[0].CloseDate);
        system.assertEquals(33.33,installments2[1].Amount);
        system.assertEquals(date.newinstance(1970,7,30),installments2[1].CloseDate);
        system.assertEquals(33.34,installments2[2].Amount);
        system.assertEquals(date.newinstance(1970,8,30),installments2[2].CloseDate);
        system.assertEquals(a.id,installments2[0].AccountId);
        UTIL_Debug.debug('**** '+installments2);

        delete r2;
        
        //delete should cascade related opps that aren't closed/won
        Opportunity[] installments3 = [select Amount, IsDeleted from Opportunity where IsDeleted=true ALL ROWS];
        system.assertEquals(3,installments3.size());
        system.assertEquals(33.33,installments3[0].Amount);

        undelete r2;

        installments3 = [select Amount, IsDeleted from Opportunity where npe03__Recurring_Donation__c = :r2.id];
        system.assertEquals(false,installments3[0].IsDeleted, 'Record should be undeleted.');
    }
    
    static testMethod void contactRolesOnOppsBucket() {
        contactRolesOnOppsProcessor(CAO_Constants.BUCKET_PROCESSOR);
    }
    static testMethod void contactRolesOnOppsOne2One() {
        contactRolesOnOppsProcessor(CAO_Constants.ONE_TO_ONE_PROCESSOR);
    }
    static testMethod void contactRolesOnOppsHHAccount() {
        contactRolesOnOppsProcessor(CAO_Constants.HH_ACCOUNT_PROCESSOR);
    }    
    static void contactRolesOnOppsProcessor(string strProcessor) {

        UTIL_CustomSettingsFacade.getContactsSettingsForTests(new npe01__Contacts_and_Orgs_Settings__c(
            npe01__Account_Processor__c = strProcessor, 
            npe01__Opportunity_Contact_Role_Default_role__c = system.label.npe03.RecurringDonationContactRole
        ));
            
        CAO_Constants.setIndividualAccountForTests(CAO_Constants.INDIVIDUAL_ACCOUNT_NAME_FOR_TESTS);

        Contact c = UTIL_UnitTestData_TEST.getContact();
        insert c; 

        Test.startTest();
        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'contactRolesOnOppsProcessor';
        r1.npe03__Installments__c = 2;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Open_Ended_Status__c = 'None'; 
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodWeekly;
        r1.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        insert r1;
        Test.stopTest();

        OpportunityContactRole[] installmentCRs = [
            SELECT ContactId, OpportunityId, Role 
            FROM OpportunityContactRole 
            WHERE Opportunity.npe03__Recurring_Donation__c = :r1.id
        ];
        system.assertEquals(2,installmentCRs.size());
        system.assertEquals(system.label.npe03.RecurringDonationContactRole,installmentCRs[0].Role);
    }

    /*********************************************************************************************************
    @description 
        Test Primary Opportunity Contact Roles (OCRs) creation using oppContactRoles().
        NOTE: Test the method even though it has not been used since NPSP3 which always 
        leverages npe01__Contact_Id_for_Role__c field on Opportunity instead of calling this method. 
    verify:
        - New Primary OCRs are created for provided Opportunities having Recurring Donations 
        with a specified Contact. 
    **********************************************************************************************************/ 
    private static testMethod void testOppContactRoleMethod() {
        UTIL_CustomSettingsFacade.getContactsSettingsForTests(new npe01__Contacts_and_Orgs_Settings__c(
            npe01__Account_Processor__c = CAO_Constants.HH_ACCOUNT_PROCESSOR, 
            npe01__Opportunity_Contact_Role_Default_role__c = System.Label.npe03.RecurringDonationContactRole
        ));
            
        CAO_Constants.setIndividualAccountForTests(CAO_Constants.INDIVIDUAL_ACCOUNT_NAME_FOR_TESTS);

        Integer size = 3;
        List<Contact> contacts = new List<Contact>();
        for (Integer i = 0; i < size; i++) {
            contacts.add(new Contact(LastName = 'foo' + i));
        }
        insert contacts;
        contacts = new List<Contact>([SELECT LastName, AccountId FROM Contact]);

        List<npe03__Recurring_Donation__c> rds = new List<npe03__Recurring_Donation__c>();
        for (Contact c : contacts) {
            rds.add(new npe03__Recurring_Donation__c(
                Name = 'testOppContactRoleMethod' + c.LastName,
                npe03__Amount__c = 100,
                npe03__Installment_Period__c = System.Label.npe03.RecurringDonationInstallmentPeriodYearly,
                npe03__Date_Established__c = Date.newInstance(1970, 6, 12),
                npe03__Schedule_Type__c = System.Label.npe03.RecurringDonationMultiplyValue,
                npe03__Contact__c = c.Id
            ));
        }

        // Execute the insert of Recurring Donations in start/stop Test to create Primary OCRs 
        // by utilizing npe01__Contact_Id_for_Role__c field on Opportunity if it exists. 
        // Otherwise, the Recurring Donations code should execute oppContactRoles() instead.
        Test.startTest();
        insert rds;
        Test.stopTest();

        List<Opportunity> opps = new List<Opportunity>([
            SELECT Id, Name
            FROM Opportunity
            WHERE npe03__Recurring_Donation__c IN :rds
        ]);

        opps.add(new Opportunity(
            Amount = 200,
            AccountId = contacts[0].AccountId,
            Name = 'testOppContactRoleMethod',
            StageName = UTIL_UnitTestData_TEST.getClosedWonStage(),
            CloseDate = System.today(),
            npe03__Recurring_Donation__c = rds[0].Id
        ));
        upsert opps;

        Set<Id> oppIds = new Map<Id, Opportunity>(opps).keySet();
        Set<Id> rdIds = new Map<Id, npe03__Recurring_Donation__c>(rds).keySet();

        delete getPrimaryOppContactRoles(rdIds);
        System.assertEquals(0, getPrimaryOppContactRoles(rdIds).size(), 'Opportunity Contact Roles should be deleted if created');

        RD_RecurringDonations.oppContactRoles(oppIds);

        System.assertEquals(opps.size(), getPrimaryOppContactRoles(rdIds).size(), 'Opportunity Contact Role should be created for each Opportunity');

        // Execute the method again and ensure no duplicate OCR is created
        RD_RecurringDonations.oppContactRoles(oppIds);
        System.assertEquals(opps.size(), getPrimaryOppContactRoles(rdIds).size(), 'No new Opportunity Contact Role should be created when oppContactRoles() is called once more');
    }
    
    static testMethod void testSettingsCreation() {

        delete [select id from npe03__Recurring_Donations_Settings__c];
        //Using the API class just to give it test coverage.
        npe03__Recurring_Donations_Settings__c rds = UTIL_CustomSettings_API.getRecurringDonationsSettings();
        system.assertEquals(12, rds.npe03__Opportunity_Forecast_Months__c);
        system.assertEquals(50, rds.npe03__Maximum_Donations__c);
        system.assertEquals(RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name(), rds.npe03__Open_Opportunity_Behavior__c);           
    }
    
    
    //tests inserts of various types of open ended donations
    static testMethod void insertOpenEndedRecurringDonations(){

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
        new npe03__Recurring_Donations_Settings__c(
        npe03__Opportunity_Forecast_Months__c = 12,
        npe03__Maximum_Donations__c = 50,
        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()        
        ));             
        
        Account a = new Account();
        a.Name = 'insertOpenEndedRecurringDonations';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;       
        
        Campaign camp = new Campaign(name = 'insertOpenEndedRecurringDonations', isActive = true);
        insert camp;
        
        list<npe03__Recurring_Donation__c> rdlist = new list<npe03__Recurring_Donation__c>();
        
        npe03__Recurring_Donation__c RD = new npe03__Recurring_Donation__c();
        RD.Name = 'testweekly';
        RD.npe03__Contact__c = c.Id;
        RD.npe03__Amount__c = 100;
        RD.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodWeekly;
        RD.npe03__Date_Established__c = system.today().toStartOfMonth();
        RD.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        RD.npe03__Open_Ended_Status__c = system.label.npe03.RecurringDonationOpenStatus;
        rdlist.add(RD);
        
        
        RD = RD.clone(false);
        RD.Name = 'testmonthly';
        RD.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodMonthly;
        RD.npe03__Contact__c = null;
        RD.npe03__Organization__c = a.id;
        RD.npe03__Recurring_Donation_Campaign__c = camp.id;
        rdlist.add(RD);
        
        RD = RD.clone(false);
        RD.Name = 'testquarterly';
        RD.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodQuarterly;
        rdlist.add(RD);
        
        RD = RD.clone(false);
        RD.Name = 'testyearly';
        RD.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodYearly;
        rdlist.add(RD);
        
        RD = RD.clone(false);
        RD.Name = 'testbadinstallment';
        RD.npe03__Installment_Period__c = 'GarbageValue';
        rdlist.add(RD);
        
        test.startTest();
        insert rdlist;
        test.stopTest();
        
        system.assertEquals(12, [select count() from Opportunity where npe03__Recurring_Donation__r.Name = 'testmonthly']);
        system.assertEquals(4, [select count() from Opportunity where npe03__Recurring_Donation__r.Name = 'testquarterly']);
        system.assertEquals(1, [select count() from Opportunity where npe03__Recurring_Donation__r.Name = 'testyearly']);
        integer cOpp =  [select count() from Opportunity where npe03__Recurring_Donation__r.Name = 'testweekly'];
        //depending on the day of week of the start date, there could be 52 or 53 in a given calendar year
        system.assert(cOpp == 52 || cOpp == 53);
    }

    /*********************************************************************************************************
    @description
        Test updating a Fixed-Length Recurring Donation when its number of installments is increased
    verify:
        - Opportunities are added and the initially created Opportunities persist.
        - Nothing is deleted.
    **********************************************************************************************************/
    static testMethod void updateFixedLengthRecurringDonationIncrease(){

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
                new npe03__Recurring_Donations_Settings__c(
                        npe03__Opportunity_Forecast_Months__c = 12,
                        npe03__Maximum_Donations__c = 50,
                        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()
                ));

        Account a = new Account();
        a.Name = 'updateFixedLengthRecurringDonationIncrease';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'updateFixedLengthRecurringDonationIncrease';
        r1.npe03__Installments__c = 2;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodWeekly;
        r1.npe03__Date_Established__c = system.today().toStartOfMonth();
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = null;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        insert r1;

        List<Opportunity> originalOpps = [SELECT Id
                , Name
                , Amount
                , AccountId
                , CloseDate
                , StageName
        FROM Opportunity
        WHERE npe03__Recurring_Donation__c = :r1.id];

        assertNoErrors();

        System.assertEquals(2, originalOpps.size(), 'Two opportunities should be created initially.');
        System.assertEquals(100, originalOpps[0].Amount);
        Test.startTest();
        r1.npe03__Installments__c = 4;
        update r1;
        Test.stopTest();

        assertNoErrors();

        List<Opportunity> postUpdateOpps = [SELECT Id
                , Name
                , Amount
                , AccountId
                , CloseDate
                , StageName
        FROM Opportunity
        WHERE npe03__Recurring_Donation__c = :r1.id];

        System.assertEquals(4, postUpdateOpps.size(),'Two new opportunities should have been created.');

        for(Integer i=0; i<originalOpps.size(); i++) {
            System.assertEquals(originalOpps[i].Id, postUpdateOpps[i].Id, 'The original opportunity records should persist.');
        }

        for(Integer i=0; i<postUpdateOpps.size(); i++) {
            System.assertEquals(system.label.npe03.RecurringDonationStageName,postUpdateOpps[i].StageName, 'All opportunities should still be open.');
        }

    }

    /*********************************************************************************************************
    @description
        Test deleting and undeleting a ClosedWon Oppty from  a Fixed-Length Recurring Donation
    verify:
        - Rollups are updated on both delete and undelete
        - npe03__Last_Payment_Date__c
        - npe03__Next_Payment_Date__c
        - npe03__Paid_Amount__c
        - npe03__Total_Paid_Installments__c
    **********************************************************************************************************/
    static testMethod void updateFixedLengthRecurringDonationDeleteUndeleteClosedOpps() {

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
                new npe03__Recurring_Donations_Settings__c(
                        npe03__Opportunity_Forecast_Months__c = 12,
                        npe03__Maximum_Donations__c = 50,
                        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()
                ));

        String closedStage = UTIL_UnitTestData_TEST.getClosedWonStage();

        Account a = new Account();
        a.Name = 'updateFixedLengthRecurringDonationDeleteUndeleteClosedOpps';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'updateFixedLengthRecurringDonationDeleteUndeleteClosedOpps';
        r1.npe03__Installments__c = 2;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodMonthly;
        r1.npe03__Date_Established__c = system.today().toStartOfMonth();
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = null;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        insert r1;

        List<Opportunity> originalOpps = [SELECT Id
                , Name
                , Amount
                , AccountId
                , CloseDate
                , StageName
        FROM Opportunity
        WHERE npe03__Recurring_Donation__c = :r1.id];

        assertNoErrors();

        System.assertEquals(2, originalOpps.size(), 'Two opportunities should be created initially.');
        System.assertEquals(100, originalOpps[0].Amount);

        Test.startTest();
        originalOpps[0].CloseDate = System.today().toStartOfMonth();
        originalOpps[0].StageName = closedStage;
        originalOpps[1].StageName = closedStage;
        update originalOpps;

        //re-query the RD for changes after the oppties are updated
        r1 = [SELECT Id
                , npe03__Last_Payment_Date__c
                , npe03__Total_Paid_Installments__c
                , npe03__Paid_Amount__c
        FROM npe03__Recurring_Donation__c WHERE Id = :r1.Id];

        System.assertEquals(System.today(), r1.npe03__Last_Payment_Date__c);
        System.assertEquals(2,r1.npe03__Total_Paid_Installments__c);
        System.assertEquals(200,r1.npe03__Paid_Amount__c);

        delete originalOpps[1];

        //re-query the RD for changes after the oppty is deleted
        r1 = [SELECT Id
                , npe03__Last_Payment_Date__c
                , npe03__Total_Paid_Installments__c
                , npe03__Paid_Amount__c
        FROM npe03__Recurring_Donation__c WHERE Id = :r1.Id];

        System.assertEquals(system.today().toStartOfMonth(), r1.npe03__Last_Payment_Date__c);
        System.assertEquals(1,r1.npe03__Total_Paid_Installments__c);
        System.assertEquals(100,r1.npe03__Paid_Amount__c);

        undelete originalOpps[1];

        //re-query the RD for changes after the oppty is deleted
        r1 = [SELECT Id
                , npe03__Last_Payment_Date__c
                , npe03__Total_Paid_Installments__c
                , npe03__Paid_Amount__c
        FROM npe03__Recurring_Donation__c WHERE Id = :r1.Id];

        System.assertEquals(system.today(), r1.npe03__Last_Payment_Date__c);
        System.assertEquals(2,r1.npe03__Total_Paid_Installments__c);
        System.assertEquals(200,r1.npe03__Paid_Amount__c);

        Test.stopTest();

        assertNoErrors();

    }

    /*********************************************************************************************************
    @description
        Test updating a Fixed-Length Recurring Donation when its number of installments is increased
        and it already has closed Opportunities
    verify:
        - Opportunities are added and the initially created Opportunities persist.
        - Nothing is deleted.
        - The Closed Won Opportunity is untouched.
    **********************************************************************************************************/
    static testMethod void updateFixedLengthRecurringDonationIncreaseWithClosedOpps() {

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
                new npe03__Recurring_Donations_Settings__c(
                        // npe03__Opportunity_Forecast_Months__c = 12,
                        npe03__Maximum_Donations__c = 50,
                        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()
                ));

        String closedStage = UTIL_UnitTestData_TEST.getClosedWonStage();

        Account a = new Account();
        a.Name = 'updateFixedLengthRecurringDonationIncreaseWithClosedOpps';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'updateFixedLengthRecurringDonationIncreaseWithClosedOpps';
        r1.npe03__Installments__c = 2;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodWeekly;
        r1.npe03__Date_Established__c = system.today().toStartOfMonth();
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = null;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        insert r1;

        List<Opportunity> originalOpps = [SELECT Id
                , Name
                , Amount
                , AccountId
                , CloseDate
                , StageName
        FROM Opportunity
        WHERE npe03__Recurring_Donation__c = :r1.id];

        assertNoErrors();

        System.assertEquals(2, originalOpps.size(), 'Two opportunities should be created initially.');
        System.assertEquals(100, originalOpps[0].Amount);
        Test.startTest();
        originalOpps[0].StageName = closedStage;
        update originalOpps[0];
        r1.npe03__Installments__c = 4;
        update r1;
        Test.stopTest();

        assertNoErrors();

        List<Opportunity> postUpdateOpps = [SELECT Id
                , Name
                , Amount
                , AccountId
                , CloseDate
                , StageName
        FROM Opportunity
        WHERE npe03__Recurring_Donation__c = :r1.id];

        System.assertEquals(4, postUpdateOpps.size(),'Two new opportunities should have been created.');

        for(Integer i=0; i<originalOpps.size(); i++) {
            System.assertEquals(originalOpps[i].Id, postUpdateOpps[i].Id, 'The original opportunity records should persist.');
        }
        System.assertEquals(closedStage, postUpdateOpps[0].StageName, 'First Opp should still be Closed Won.');
        for(Integer i=1; i<postUpdateOpps.size(); i++) {
            System.assertEquals(system.label.npe03.RecurringDonationStageName,postUpdateOpps[i].StageName, 'Opportunities 2-4 should still be open.');
        }
    }

    /*********************************************************************************************************
    @description
        Test updating a Fixed-Length Recurring Donation when its number of installments is decreased
    verify:
        - Opportunities are added and all initially created Opportunities persist.
        - Nothing is deleted.
        - Extraneous Opportunities are marked Closed Lost as per Open Opp Behavior setting.
    **********************************************************************************************************/
    static testMethod void updateFixedLengthRecurringDonationDecrease() {

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
                new npe03__Recurring_Donations_Settings__c(
                        // npe03__Opportunity_Forecast_Months__c = 12,
                        npe03__Maximum_Donations__c = 50,
                        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()
                ));

        Account a = new Account();
        a.Name = 'updateFixedLengthRecurringDonationDecrease';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'updateFixedLengthRecurringDonationDecrease';
        r1.npe03__Installments__c = 4;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodWeekly;
        r1.npe03__Date_Established__c = system.today().toStartOfMonth();
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationDivideValue;
        r1.npe03__Open_Ended_Status__c = null;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        insert r1;

        List<Opportunity> originalOpps = [SELECT Id
                , Name
                , Amount
                , AccountId
                , CloseDate
                , StageName
        FROM Opportunity
        WHERE npe03__Recurring_Donation__c = :r1.id];

        assertNoErrors();

        System.assertEquals(4, originalOpps.size(), 'Four opportunities should be created initially.');
        System.assertEquals(25, originalOpps[0].Amount);
        Test.startTest();
        r1.npe03__Installments__c = 2;
        update r1;
        Test.stopTest();

        assertNoErrors();

        List<Opportunity> postUpdateOpps = [SELECT Id
                , Name
                , Amount
                , AccountId
                , CloseDate
                , StageName
        FROM Opportunity
        WHERE npe03__Recurring_Donation__c = :r1.id];

        for (Opportunity o : originalOpps) {
            System.assertEquals(25, originalOpps[0].Amount, 'All originalOpps should be $25.');
            System.assertEquals(system.label.npe03.RecurringDonationStageName, originalOpps[0].StageName, 'All originalOpps should be Open.');
        }
        System.assertEquals(postUpdateOpps.size(), originalOpps.size(), 'No opportunities should have been deleted.');

        for(Integer i=0; i<originalOpps.size(); i++) {
            System.assertEquals(originalOpps[i].Id, postUpdateOpps[i].Id, 'The original opportunity records should persist.');
        }
        System.assertEquals(50, postUpdateOpps[0].Amount, 'Opportunity 1 should be $50.');
        System.assertEquals(system.label.npe03.RecurringDonationStageName,postUpdateOpps[0].StageName, 'Opportunity 1 should still be open.');

        System.assertEquals(50, postUpdateOpps[1].Amount, 'Opportunity 2 should be $50.');
        System.assertEquals(system.label.npe03.RecurringDonationStageName,postUpdateOpps[1].StageName, 'Opportunity 2 should still be open.');

        System.assertEquals(25, postUpdateOpps[2].Amount, 'Opportunity 3 should still be $25.');
        System.assertEquals(system.label.npe03.RecurringDonationClosedLostOpportunityStage, postUpdateOpps[2].StageName, 'Opportunity 3 should be Closed Lost.');

        System.assertEquals(25, postUpdateOpps[3].Amount, 'Opportunity 4 should still be $25.');
        System.assertEquals(system.label.npe03.RecurringDonationClosedLostOpportunityStage, postUpdateOpps[3].StageName, 'Opportunity 4 should be Closed Lost.');

    }

    /*********************************************************************************************************
    @description
        Test updating a Fixed-Length Recurring Donation when its number of installments is decreased
        and it already has closed Opportunities
    verify:
        - Opportunities are added and all initially created Opportunities persist.
        - Nothing is deleted.
        - The Closed Won Opportunity is untouched.
        - Extraneous Opportunities are marked Closed Lost as per Open Opp Behavior setting.
    **********************************************************************************************************/
    static testMethod void updateFixedLengthRecurringDonationDecreaseWithClosedOpps() {

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
                new npe03__Recurring_Donations_Settings__c(
                        // npe03__Opportunity_Forecast_Months__c = 12,
                        npe03__Maximum_Donations__c = 50,
                        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()
                ));

        String closedStage = UTIL_UnitTestData_TEST.getClosedWonStage();

        Account a = new Account();
        a.Name = 'updateFixedLengthRecurringDonationDecreaseWithClosedOpps';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'updateFixedLengthRecurringDonationDecreaseWithClosedOpps';
        r1.npe03__Installments__c = 4;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodWeekly;
        r1.npe03__Date_Established__c = system.today().toStartOfMonth();
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationDivideValue;
        r1.npe03__Open_Ended_Status__c = null;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        insert r1;

        List<Opportunity> originalOpps = [SELECT Id
                , Name
                , Amount
                , AccountId
                , CloseDate
                , StageName
        FROM Opportunity
        WHERE npe03__Recurring_Donation__c = :r1.id];

        assertNoErrors();

        System.assertEquals(4, originalOpps.size(), 'Four opportunities should be created initially.');
        for (Opportunity o : originalOpps) {
            System.assertEquals(25, originalOpps[0].Amount, 'All originalOpps should be $25.');
            System.assertEquals(system.label.npe03.RecurringDonationStageName, originalOpps[0].StageName, 'All originalOpps should be Open.');
        }

        Test.startTest();
        originalOpps[0].StageName = closedStage;
        update originalOpps[0];
        r1.npe03__Installments__c = 2;
        update r1;
        Test.stopTest();

        assertNoErrors();

        List<Opportunity> postUpdateOpps = [SELECT Id
                , Name
                , Amount
                , AccountId
                , CloseDate
                , StageName
        FROM Opportunity
        WHERE npe03__Recurring_Donation__c = :r1.id];

        System.assertEquals(postUpdateOpps.size(), originalOpps.size(), 'No opportunities should have been deleted.');

        for(Integer i=0; i<originalOpps.size(); i++) {
            System.assertEquals(originalOpps[i].Id, postUpdateOpps[i].Id, 'The original opportunity records should persist.');
        }
        System.assertEquals(25, postUpdateOpps[0].Amount, 'Opportunity 1 should still be $25.');
        System.assertEquals(closedStage, postUpdateOpps[0].StageName, 'Opportunity 1 should still be Closed Won.');

        System.assertEquals(75, postUpdateOpps[1].Amount, 'Opportunity 2 should be $75.');
        System.assertEquals(system.label.npe03.RecurringDonationStageName,postUpdateOpps[1].StageName, 'Opportunity 2 should still be open.');

        System.assertEquals(25, postUpdateOpps[2].Amount, 'Opportunity 3 should still be $25.');
        System.assertEquals(system.label.npe03.RecurringDonationClosedLostOpportunityStage, postUpdateOpps[2].StageName, 'Opportunity 3 should be Closed Lost.');

        System.assertEquals(25, postUpdateOpps[3].Amount, 'Opportunity 4 should still be $25.');
        System.assertEquals(system.label.npe03.RecurringDonationClosedLostOpportunityStage, postUpdateOpps[3].StageName, 'Opportunity 4 should be Closed Lost.');
    }

    /*********************************************************************************************************
    @description
        Test updating a Fixed-Length Recurring Donation with a number of installments less than
        its number of already-Closed Won Opportunities.
    verify:
        - Recurring Donation update disallowed; error thrown to user.
    **********************************************************************************************************/
    static testMethod void updateFixedLengthRecurringDonationDecreaseWithTooManyClosedOpps() {

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
                new npe03__Recurring_Donations_Settings__c(
                        // npe03__Opportunity_Forecast_Months__c = 12,
                        npe03__Maximum_Donations__c = 50,
                        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()
                ));

        String closedStage = UTIL_UnitTestData_TEST.getClosedWonStage();

        Account a = new Account();
        a.Name = 'updateFixedLengthRecurringDonationDecreaseWithTooManyClosedOpps';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'updateFixedLengthRecurringDonationDecreaseWithTooManyClosedOpps';
        r1.npe03__Installments__c = 4;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodWeekly;
        r1.npe03__Date_Established__c = system.today().toStartOfMonth();
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationDivideValue;
        r1.npe03__Open_Ended_Status__c = null;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        insert r1;

        List<Opportunity> originalOpps = [SELECT Id
                , Name
                , Amount
                , AccountId
                , CloseDate
                , StageName
        FROM Opportunity
        WHERE npe03__Recurring_Donation__c = :r1.id];

        assertNoErrors();

        System.assertEquals(4, originalOpps.size(), 'Four opportunities should be created initially.');
        for (Opportunity o : originalOpps) {
            System.assertEquals(25, originalOpps[0].Amount, 'All originalOpps should be $25.');
            System.assertEquals(system.label.npe03.RecurringDonationStageName, originalOpps[0].StageName, 'All originalOpps should be Open.');
        }

        Test.startTest();
        //close the first 3 opportunities
        originalOpps[0].StageName = closedStage;
        originalOpps[1].StageName = closedStage;
        originalOpps[2].StageName = closedStage;
        update originalOpps;
        //update the RD to be only 2 installments
        Exception ex;
        try {
            r1.npe03__Installments__c = 2;
            update r1;
        } catch (Exception e) {
            ex = e;
        }
        Test.stopTest();
        System.assert(ex.getMessage().contains(Label.RD_ErrorMoreClosedWonOpportunitiesThanInstallments),'Exception should be thrown.');
    }

    /*********************************************************************************************************
    @description
        Test updating a Fixed-Length Recurring Donation with a number of installments equal to
        its number of already-Closed Won Opportunities, but the Closed Won Opportunities' Amounts
        don't add up to the Amount of the Fixed-Length RD.
    verify:
        - Recurring Donation update disallowed; error thrown to user.
    **********************************************************************************************************/
    static testMethod void updateFixedLengthRecurringDonationDecreaseWithMismatchedAmount() {

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
                new npe03__Recurring_Donations_Settings__c(
                        // npe03__Opportunity_Forecast_Months__c = 12,
                        npe03__Maximum_Donations__c = 50,
                        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()
                ));

        String closedStage = UTIL_UnitTestData_TEST.getClosedWonStage();

        Account a = new Account();
        a.Name = 'updateFixedLengthRecurringDonationDecreaseWithTooManyClosedOpps';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'updateFixedLengthRecurringDonationDecreaseWithTooManyClosedOpps';
        r1.npe03__Installments__c = 4;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodWeekly;
        r1.npe03__Date_Established__c = system.today().toStartOfMonth();
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationDivideValue;
        r1.npe03__Open_Ended_Status__c = null;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        insert r1;

        List<Opportunity> originalOpps = [SELECT Id
                , Name
                , Amount
                , AccountId
                , CloseDate
                , StageName
        FROM Opportunity
        WHERE npe03__Recurring_Donation__c = :r1.id];

        assertNoErrors();

        System.assertEquals(4, originalOpps.size(), 'Four opportunities should be created initially.');
        for (Opportunity o : originalOpps) {
            System.assertEquals(25, originalOpps[0].Amount, 'All originalOpps should be $25.');
            System.assertEquals(system.label.npe03.RecurringDonationStageName, originalOpps[0].StageName, 'All originalOpps should be Open.');
        }

        Test.startTest();
        //close the first 3 opportunities
        originalOpps[0].StageName = closedStage;
        originalOpps[1].StageName = closedStage;
        originalOpps[2].StageName = closedStage;
        update originalOpps;
        //update the RD to be only 3 installments
        Exception ex;
        try {
            r1.npe03__Installments__c = 3;
            update r1;
        } catch (Exception e) {
            ex = e;
        }
        Test.stopTest();
        System.assert(ex.getMessage().contains(Label.RD_ErrorNotEnoughClosedValueForFixedLength),'Exception should be thrown.');
    }

    static testMethod void updateOpenEndedRecurringDonationMonthly(){

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
        new npe03__Recurring_Donations_Settings__c(
        npe03__Opportunity_Forecast_Months__c = 12,
        npe03__Maximum_Donations__c = 50,
        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()
        ));

        Account a = new Account();
        a.Name = 'updateOpenEndedRecurringDonationMonthly';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'updateOpenEndedRecurringDonationMonthly';
        r1.npe03__Installments__c = 2;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodWeekly;
        r1.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = system.label.npe03.RecurringDonationOpenStatus;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        insert r1;

        List<Opportunity> originalOpps = [SELECT Id
                                        , Name
                                        , Amount
                                        , AccountId
                                        , CloseDate
                                        , StageName
                                        FROM Opportunity
                                        WHERE npe03__Recurring_Donation__c = :r1.id];

        Integer cOpp =  originalOpps.size();
        //depending on the day of week of the start date, there could be 52 or 53 in a given calendar year
        System.assert(cOpp == 52 || cOpp == 53);
        System.assertEquals(100, originalOpps[0].Amount);
        Test.startTest();
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodMonthly;
        update r1;
        Test.stopTest();

        assertNoErrors();

        List<Opportunity> postUpdateOpps = [SELECT Id
                                            , Name
                                            , Amount
                                            , AccountId
                                            , CloseDate
                                            , StageName
                                            FROM Opportunity
                                            WHERE npe03__Recurring_Donation__c = :r1.id];

        System.assertEquals(postUpdateOpps.size(), originalOpps.size(), 'No opportunities should have been deleted.');

        for(Integer i=0; i<originalOpps.size(); i++) {
            System.assertEquals(originalOpps[i].Id, postUpdateOpps[i].Id, 'The original opportunity records should persist.');
        }

        for(Integer i=0; i<12; i++) {
            System.debug(postUpdateOpps[i].Name);
            System.assertEquals(system.label.npe03.RecurringDonationStageName,postUpdateOpps[i].StageName, 'The first 13 opportunities should still be open.');
        }
        for(Integer i=13; i<postUpdateOpps.size(); i++) {
            System.debug(postUpdateOpps[i].Name);
            System.assertEquals(system.label.npe03.RecurringDonationClosedLostOpportunityStage,postUpdateOpps[i].StageName, 'All opportunities after the first 13 should be marked closed lost.');
        }

    }

    static testMethod void updateOpenEndedRecurringDonation1an15(){

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
        new npe03__Recurring_Donations_Settings__c(
        npe03__Opportunity_Forecast_Months__c = 12,
        npe03__Maximum_Donations__c = 50,
        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name(),
        npe03__Add_Campaign_to_All_Opportunites__c = true        
        ));           
        
        Account a = new Account();
        a.Name = 'updateOpenEndedRecurringDonation1an15';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;       

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'updateOpenEndedRecurringDonation1an15';
        r1.npe03__Installments__c = 2;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriod1stand15th;
        r1.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = system.label.npe03.RecurringDonationOpenStatus;
        r1.npe03__Next_Payment_Date__c = system.today();
       
        Test.startTest();
        insert r1;
        Test.stopTest();
        list<Opportunity> originalOpps = new list<Opportunity>([select id, Name,amount,accountid,CloseDate from Opportunity where npe03__Recurring_Donation__c = :r1.id order by CloseDate]);          
        integer cOpp =  originalOpps.size();
        system.assert(cOpp == 23 || cOpp == 24);        
        system.assertEquals(100, originalOpps[0].Amount);        
    }
    
    static testMethod void updateOpenEndedRecurringDonationYearly(){

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
        new npe03__Recurring_Donations_Settings__c(
        npe03__Opportunity_Forecast_Months__c = 12,
        npe03__Maximum_Donations__c = 50,
        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()        
        ));           
        
        Account a = new Account();
        a.Name = 'updateOpenEndedRecurringDonationYearly';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;       

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'updateOpenEndedRecurringDonationYearly';
        r1.npe03__Installments__c = 2;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodWeekly;
        r1.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = system.label.npe03.RecurringDonationOpenStatus;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        insert r1;
        
        list<Opportunity> originalOpps = new list<Opportunity>([select id, Name,amount,accountid,CloseDate from Opportunity where npe03__Recurring_Donation__c = :r1.id]);
        
        integer cOpp =  originalOpps.size();
        //depending on the day of week of the start date, there could be 52 or 53 in a given calendar year
        system.assert(cOpp == 52 || cOpp == 53);        
        system.assertEquals(100, originalOpps[0].Amount);
        Test.startTest();
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodYearly;
        update r1;
        Test.stopTest();

        List<Opportunity> postUpdateOpps = [SELECT Id, Name, StageName, CloseDate FROM Opportunity WHERE npe03__Recurring_Donation__c = :r1.id];

        System.assertEquals(postUpdateOpps.size(), originalOpps.size(), 'No opportunities should have been deleted.');

        for(Integer i=0; i<originalOpps.size(); i++) {
            System.assertEquals(originalOpps[i].Id, postUpdateOpps[i].Id, 'The original opportunity records should persist.');
        }

        System.assertEquals(system.label.npe03.RecurringDonationStageName, postUpdateOpps[0].StageName, 'First Opportunity should still be open.');
        System.assertEquals(system.label.npe03.RecurringDonationStageName, postUpdateOpps[1].StageName, 'Second Opportunity should still be open.');

        for (Integer i=2; i<postUpdateOpps.size(); i++) {
            System.assertEquals(system.label.npe03.RecurringDonationClosedLostOpportunityStage, postUpdateOpps[i].StageName, 'All other Opportunities should be Closed Lost.');
        }
    }

    static testMethod void updateOpenEndedRecurringDonationWeekly(){

            UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
        new npe03__Recurring_Donations_Settings__c(
        npe03__Opportunity_Forecast_Months__c = 12,
        npe03__Maximum_Donations__c = 50,
        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()        
        ));           
        
        Account a = new Account();
        a.Name = 'updateOpenEndedRecurringDonationWeekly';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;       

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'updateOpenEndedRecurringDonationWeekly';
        r1.npe03__Installments__c = 2;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodMonthly;
        r1.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = system.label.npe03.RecurringDonationOpenStatus;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        insert r1;
        
        list<Opportunity> originalOpps = new list<Opportunity>([select id, Name,amount,accountid,CloseDate from Opportunity where npe03__Recurring_Donation__c = :r1.id]);
        
        system.assertEquals(12, originalOpps.size());
        system.assertEquals(100, originalOpps[0].Amount);
        Test.startTest();
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodWeekly;
        update r1;
        Test.stopTest();

        List<Opportunity> postUpdateOpps = [SELECT Id, Name, StageName, CloseDate FROM Opportunity WHERE npe03__Recurring_Donation__c = :r1.id];

        //depending on the day of week of the start date, there could be 52 or 53 in a given calendar year
        System.assert(postUpdateOpps.size() == 52 || postUpdateOpps.size() == 53, 'New opportunities should have been created.');

        for(Integer i=0; i<originalOpps.size(); i++) {
            System.assertEquals(originalOpps[i].Id, postUpdateOpps[i].Id, 'The original opportunity records should persist.');
        }

        for (Integer i=0; i<postUpdateOpps.size(); i++) {
            System.debug(postUpdateOpps[i].Name);
            System.assertEquals(system.label.npe03.RecurringDonationStageName, postUpdateOpps[i].StageName, 'All Opportunities should be open.');
        }
        for (Integer i=1; i<postUpdateOpps.size(); i++) {
            System.assertEquals(postUpdateOpps[i-1].CloseDate+7, postUpdateOpps[i].CloseDate, 'All Opportunities should be one week apart.');
        }
    }
    
    static testMethod void updateOpenEndedRecurringDonationQuarterly(){

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
        new npe03__Recurring_Donations_Settings__c(
        npe03__Opportunity_Forecast_Months__c = 12,
        npe03__Maximum_Donations__c = 50,
        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()        
        ));           
        
        Account a = new Account();
        a.Name = 'updateOpenEndedRecurringDonationQuarterly';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;       

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'updateOpenEndedRecurringDonationQuarterly';
        r1.npe03__Installments__c = 2;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodWeekly;
        r1.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = system.label.npe03.RecurringDonationOpenStatus;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        insert r1;
        
        list<Opportunity> originalOpps = new list<Opportunity>([select id, Name,amount,accountid,CloseDate from Opportunity where npe03__Recurring_Donation__c = :r1.id]);
        
        integer cOpp =  originalOpps.size();
        //depending on the day of week of the start date, there could be 52 or 53 in a given calendar year
        system.assert(cOpp == 52 || cOpp == 53);
        system.assertEquals(100, originalOpps[0].Amount);
        Test.startTest();
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodQuarterly;
        update r1;
        Test.stopTest();

        List<Opportunity> postUpdateOpps = [SELECT Id, StageName, CloseDate FROM Opportunity WHERE npe03__Recurring_Donation__c = :r1.id];

        System.assertEquals(postUpdateOpps.size(), originalOpps.size(), 'No opportunities should have been deleted.');

        for(Integer i=0; i<originalOpps.size(); i++) {
            System.assertEquals(originalOpps[i].Id, postUpdateOpps[i].Id, 'The original opportunity records should persist.');
        }

        for(Integer i=0; i<5; i++) {
            System.assertEquals(system.label.npe03.RecurringDonationStageName, postUpdateOpps[i].StageName, 'First five Opportunities should still be open.');
        }

        for (Integer i=5; i<postUpdateOpps.size(); i++) {
            System.assertEquals(system.label.npe03.RecurringDonationClosedLostOpportunityStage, postUpdateOpps[i].StageName, 'All other Opportunities should be Closed Lost.');
        }
    }
        
    //test closing an opportunity for an open recurring donation
    static testMethod void closeOppForOpenEndedRecurringDonationWeekly(){

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
        new npe03__Recurring_Donations_Settings__c(
        npe03__Opportunity_Forecast_Months__c = 12,
        npe03__Maximum_Donations__c = 50,
        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()        
        ));           
        
        Account a = new Account();
        a.Name = 'closeOppForOpenEndedRecurringDonationWeekly';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;       

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'closeOppForOpenEndedRecurringDonationWeekly';
        r1.npe03__Installments__c = 2;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodWeekly;
        r1.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = system.label.npe03.RecurringDonationOpenStatus;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        r1.OwnerId = system.Userinfo.getUserId();
        insert r1;
        
        list<Opportunity> originalOpps = new list<Opportunity>([select id, Name,amount,accountid,CloseDate from Opportunity where npe03__Recurring_Donation__c = :r1.id order by CloseDate]);
        integer cOpp =  originalOpps.size();
        //depending on the day of week of the start date, there could be 52 or 53 in a given calendar year
        system.assert(cOpp == 52 || cOpp == 53);
        
        Opportunity o = originalOpps[0];
        string closedstage = [select masterlabel from opportunitystage where isActive = true and iswon = true and isClosed = true limit 1].masterlabel;
        o.StageName = closedstage;
        o.CloseDate = system.today();
        Test.startTest();
        //update opp
        update o;
        //call the update method
        RD_RecurringDonations.evaluateRecurringDonationsForNewOppInsert(new list<npe03__Recurring_Donation__c>{r1});
        Test.stopTest();        
        
        npe03__Recurring_Donation__c rd = [select npe03__Last_Payment_Date__c from npe03__Recurring_Donation__c where id = :r1.id];     
        
        system.assertEquals(cOpp - 1, [select count() from Opportunity where npe03__Recurring_Donation__c = :r1.id and isClosed = false]);
        system.assertEquals(system.today(), rd.npe03__Last_Payment_Date__c);
    }
    //test closing an opportunity for an open recurring donation
    static testMethod void closeOppForOpenEndedRecurringDonationMonthly(){

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
        new npe03__Recurring_Donations_Settings__c(
        npe03__Opportunity_Forecast_Months__c = 6,
        npe03__Maximum_Donations__c = 50,
        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()        
        ));           
        
        Account a = new Account();
        a.Name = 'closeOppForOpenEndedRecurringDonationMonthly';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;       

        list<npe03__Recurring_Donation__c> rdlist = new list<npe03__Recurring_Donation__c>();
        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'closeOppForOpenEndedRecurringDonationMonthly';
        r1.npe03__Installments__c = 2;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodYearly;
        r1.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = system.label.npe03.RecurringDonationOpenStatus;
        r1.npe03__Next_Payment_Date__c = system.today();
        r1.OwnerId = system.Userinfo.getUserId();
        rdlist.add(r1);
        insert rdlist; 
        
        system.assertNotEquals(null, r1.id);
        list<Opportunity> originalOpps = new list<Opportunity>([select id, Name,amount,accountid,CloseDate from Opportunity where npe03__Recurring_Donation__r.id = :r1.id order by CloseDate]);
        system.assertEquals(1, originalOpps.size());
        
        Opportunity o1 = originalOpps[0];
        string closedstage = [select masterlabel from opportunitystage where isActive = true and iswon = true and isClosed = true limit 1].masterlabel;
        o1.StageName = closedstage;
        o1.CloseDate = system.today();
        list<Opportunity> oppList = new list<Opportunity>{o1};
        Test.startTest();
        //update opp
        update oppList;
        //call the update method
        RD_RecurringDonations.evaluateRecurringDonationsForNewOppInsert(new list<npe03__Recurring_Donation__c>{r1});
        Test.stopTest();
        npe03__Recurring_Donation__c rd = [select npe03__Last_Payment_Date__c from npe03__Recurring_Donation__c where id = :r1.id];     
        system.assertEquals(system.today(), rd.npe03__Last_Payment_Date__c);
        originalOpps = new list<Opportunity>([select id, Name,amount,stagename,accountid,CloseDate from Opportunity where isClosed = false and npe03__Recurring_Donation__r.id = :r1.id]);
        system.assertEquals(0, originalOpps.size());
    }
    
    //test closing an opportunity for an open recurring donation
    static testMethod void closeOppForOpenEndedRecurringDonationQuarterly(){

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
        new npe03__Recurring_Donations_Settings__c(
        npe03__Opportunity_Forecast_Months__c = 12,
        npe03__Maximum_Donations__c = 50,
        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()        
        ));           
        
        Account a = new Account();
        a.Name = 'closeOppForOpenEndedRecurringDonationQuarterly';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;       

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'closeOppForOpenEndedRecurringDonationQuarterly';
        r1.npe03__Installments__c = 2;
        r1.npe03__Contact__c = c.Id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = system.label.npe03.RecurringDonationInstallmentPeriodQuarterly;
        r1.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = system.label.npe03.RecurringDonationOpenStatus;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        r1.OwnerId = system.Userinfo.getUserId();
        insert r1;
        
        list<Opportunity> originalOpps = new list<Opportunity>([select id, Name,amount,accountid,CloseDate from Opportunity where npe03__Recurring_Donation__c = :r1.id order by CloseDate]);
        system.assertEquals(4, originalOpps.size());          
        
        Opportunity o = originalOpps[0];
        system.debug('**** DJH gonna close opp with date: ' + o.CloseDate);
        system.assertEquals(system.today().toStartOfMonth(), o.CloseDate);
        string closedstage = [select masterlabel from opportunitystage where isActive = true and iswon = true and isClosed = true limit 1].masterlabel;
        o.StageName = closedstage;
        o.CloseDate = system.today();
        Test.startTest();
        //update opp
        update o;
        //re-query the RD for changes after the oppty is updated
        r1 = [SELECT Id
                , Name
                , npe03__Installments__c
                , npe03__Contact__c
                , npe03__Amount__c
                , npe03__Installment_Period__c
                , npe03__Date_Established__c
                , npe03__Schedule_Type__c
                , npe03__Open_Ended_Status__c
                , npe03__Next_Payment_Date__c
                , npe03__Last_Payment_Date__c
                , Always_Use_Last_Day_Of_Month__c
                , npe03__Total_Paid_Installments__c
                , npe03__Recurring_Donation_Campaign__c
                , npe03__Organization__c
                , npe03__Donor_Name__c
                , OwnerId
        FROM npe03__Recurring_Donation__c WHERE Id = :r1.Id];
        RD_RecurringDonations.evaluateRecurringDonationsForNewOppInsert(new list<npe03__Recurring_Donation__c>{r1});
        Test.stopTest();
                
        npe03__Recurring_Donation__c rd = [select npe03__Last_Payment_Date__c from npe03__Recurring_Donation__c where id = :r1.id];     
        system.assertEquals(system.today(), rd.npe03__Last_Payment_Date__c);
        system.assertEquals(3, [select count() from Opportunity where npe03__Recurring_Donation__c = :r1.id and isClosed = false]);        
    }
    
    //test closing an opportunity for an open recurring donation
    static testMethod void closeOppForOpenEndedRecurringDonationCustomWeeks(){

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
        new npe03__Recurring_Donations_Settings__c(
        npe03__Opportunity_Forecast_Months__c = 12,
        npe03__Maximum_Donations__c = 50,
        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()        
        ));           
        
        Account a = new Account();
        a.Name = 'closeOppForOpenEndedRecurringDonationCustomWeeks';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;       

        npe03__Custom_Installment_Settings__c cis = new npe03__Custom_Installment_Settings__c(
        npe03__Increment__c = 'Weeks',
        npe03__Value__c = 2,
        Name = 'TESTCIS'
        );
        insert cis;        

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'closeOppForOpenEndedRecurringDonationCustomWeeks';
        r1.npe03__Installments__c = 2;
        r1.npe03__Organization__c = a.id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = 'TESTCIS';
        r1.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = system.label.npe03.RecurringDonationOpenStatus;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        r1.OwnerId = system.Userinfo.getUserId();
        insert r1;
        
        list<Opportunity> originalOpps = new list<Opportunity>([select id, Name,amount,accountid,CloseDate from Opportunity where npe03__Recurring_Donation__c = :r1.id order by CloseDate]);
        integer cOpp = originalOpps.size();
        //depending on the day of week of the start date, there could be 26 or 27 in a given calendar year
        system.assert(cOpp == 26 || cOpp == 27);
        
        Opportunity o = originalOpps[0];
        string closedstage = [select masterlabel from opportunitystage where isActive = true and iswon = true and isClosed = true limit 1].masterlabel;
        o.StageName = closedstage;
        o.CloseDate = system.today();
        Test.startTest();
        //update opp
        update o;
        //call the update method
        RD_RecurringDonations.evaluateRecurringDonationsForNewOppInsert(new list<npe03__Recurring_Donation__c>{r1});
        Test.stopTest();        
        
        npe03__Recurring_Donation__c rd = [select npe03__Last_Payment_Date__c from npe03__Recurring_Donation__c where id = :r1.id];     
        
        system.assert(26 <= [select count() from Opportunity where npe03__Recurring_Donation__c = :r1.id and isClosed = false]);
        system.assertEquals(system.today(), rd.npe03__Last_Payment_Date__c);
    }
    
    //test closing an opportunity for an open recurring donation
    static testMethod void closeOppForOpenEndedRecurringDonationCustomDays(){

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
        new npe03__Recurring_Donations_Settings__c(
        npe03__Opportunity_Forecast_Months__c = 1,
        npe03__Maximum_Donations__c = 50,
        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name()        
        ));           
        
        Account a = new Account();
        a.Name = 'closeOppForOpenEndedRecurringDonationCustomDays';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;       

        npe03__Custom_Installment_Settings__c cis = new npe03__Custom_Installment_Settings__c(
        npe03__Increment__c = 'Days',
        npe03__Value__c = 2,
        Name = 'TESTCIS'        
        );
        insert cis;        

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'closeOppForOpenEndedRecurringDonationCustomDays';
        r1.npe03__Installments__c = 2;
        r1.npe03__Organization__c = a.id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = 'TESTCIS';
        r1.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = system.label.npe03.RecurringDonationOpenStatus;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        insert r1;
        
        list<Opportunity> originalOpps = new list<Opportunity>([select id, Name,amount,accountid,CloseDate from Opportunity where npe03__Recurring_Donation__c = :r1.id order by CloseDate]);
        integer cOpp =  originalOpps.size();
        system.assert(cOpp == 14 || cOpp == 15 || cOpp == 16);        
        
        Opportunity o = originalOpps[0];
        string closedstage = [select masterlabel from opportunitystage where isActive = true and iswon = true and isClosed = true limit 1].masterlabel;
        o.StageName = closedstage;
        o.CloseDate = system.today();
        Test.startTest();
        //update opp
        update o;
        //call the update method        
        Test.stopTest();        
        
        npe03__Recurring_Donation__c rd = [select npe03__Last_Payment_Date__c from npe03__Recurring_Donation__c where id = :r1.id];     
        
        system.assertEquals(cOpp - 1, [select count() from Opportunity where npe03__Recurring_Donation__c = :r1.id and isClosed = false]);
        system.assertEquals(system.today(), rd.npe03__Last_Payment_Date__c);
    }
    
    //test closing an opportunity for an open recurring donation
    static testMethod void closeOppForOpenEndedRecurringDonationCustomMonths(){

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
        new npe03__Recurring_Donations_Settings__c(
        npe03__Opportunity_Forecast_Months__c = 12,
        npe03__Maximum_Donations__c = 50,
        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name(),
        npe03__Add_Campaign_to_All_Opportunites__c = true        
        ));           
        
        Account a = new Account();
        a.Name = 'closeOppForOpenEndedRecurringDonationCustomMonths';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;       

        npe03__Custom_Installment_Settings__c cis = new npe03__Custom_Installment_Settings__c(
        npe03__Increment__c = 'Months',
        npe03__Value__c = 2,
        Name = 'TESTCIS'        
        );
        insert cis;        

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'closeOppForOpenEndedRecurringDonationCustomMonths';
        r1.npe03__Installments__c = 2;
        r1.npe03__Organization__c = a.id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = 'TESTCIS';
        r1.npe03__Date_Established__c = date.newinstance(2000,1,1);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = system.label.npe03.RecurringDonationOpenStatus;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        r1.OwnerId = system.Userinfo.getUserId();
        insert r1;
        
        list<Opportunity> originalOpps = new list<Opportunity>([select id, stagename, Name,amount,accountid,CloseDate from Opportunity where npe03__Recurring_Donation__c = :r1.id order by CloseDate]);
        system.assertEquals(6, originalOpps.size());          
        
        Opportunity o = originalOpps[0];
        string closedstage = [select masterlabel from opportunitystage where isActive = true and iswon = true and isClosed = true limit 1].masterlabel;
        o.StageName = closedstage;
        o.CloseDate = system.today();
        Test.startTest();
        //update opp
        update o;
        //call the update method
        npe03__Recurring_Donation__c rd = [select npe03__Last_Payment_Date__c from npe03__Recurring_Donation__c where id = :r1.id];
        system.assertEquals(5, [select count() from Opportunity where npe03__Recurring_Donation__c = :r1.id and isClosed = false]);
        system.assertEquals(system.today(), rd.npe03__Last_Payment_Date__c);

        //re-query the RD for changes after the oppty is updated
        r1 = [SELECT Id
                , Name
                , npe03__Installments__c
                , npe03__Contact__c
                , npe03__Amount__c
                , npe03__Installment_Period__c
                , npe03__Date_Established__c
                , npe03__Schedule_Type__c
                , npe03__Open_Ended_Status__c
                , npe03__Next_Payment_Date__c
                , npe03__Last_Payment_Date__c
                , Always_Use_Last_Day_Of_Month__c
                , npe03__Total_Paid_Installments__c
                , npe03__Recurring_Donation_Campaign__c
                , npe03__Organization__c
                , npe03__Donor_Name__c
                , OwnerId
        FROM npe03__Recurring_Donation__c WHERE Id = :r1.Id];
        RD_RecurringDonations.evaluateRecurringDonationsForNewOppInsert(new list<npe03__Recurring_Donation__c>{r1});
        Test.stopTest();

        rd = [select npe03__Last_Payment_Date__c from npe03__Recurring_Donation__c where id = :r1.id];

        system.assertEquals(5, [select count() from Opportunity where npe03__Recurring_Donation__c = :r1.id and isClosed = false]);
        system.assertEquals(system.today(), rd.npe03__Last_Payment_Date__c);
    }

    //test closing an opportunity for an open recurring donation
    static testMethod void closeOppForOpenEndedRecurringDonationCustomYears(){

        UTIL_CustomSettingsFacade.getRecurringDonationsSettingsForTest(
        new npe03__Recurring_Donations_Settings__c(
        npe03__Opportunity_Forecast_Months__c = 12,
        npe03__Maximum_Donations__c = 50,
        npe03__Open_Opportunity_Behavior__c = RD_RecurringDonations.RecurringDonationCloseOptions.Mark_Opportunities_Closed_Lost.name(),
        npe03__Add_Campaign_to_All_Opportunites__c = true       
        ));           
        
        Account a = new Account();
        a.Name = 'closeOppForOpenEndedRecurringDonationCustomYears';
        insert a;

        Contact c = UTIL_UnitTestData_TEST.getContact();
        c.AccountId = a.Id;
        insert c;       

        npe03__Custom_Installment_Settings__c cis = new npe03__Custom_Installment_Settings__c(
        npe03__Increment__c = 'Years',
        npe03__Value__c = 2,
        Name = 'TESTCIS'        
        );
        insert cis;        

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'closeOppForOpenEndedRecurringDonationCustomYears';
        r1.npe03__Installments__c = 2;
        r1.npe03__Organization__c = a.id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = 'TESTCIS';
        r1.npe03__Date_Established__c = date.newinstance(1970,6,12);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = system.label.npe03.RecurringDonationOpenStatus;
        r1.npe03__Next_Payment_Date__c = system.today();
        r1.OwnerId = system.Userinfo.getUserId();
        insert r1;
        
        list<Opportunity> originalOpps = new list<Opportunity>([select id, Name,amount,accountid,CloseDate from Opportunity where npe03__Recurring_Donation__c = :r1.id order by CloseDate]);
        system.assertEquals(1, originalOpps.size());          
        
        Opportunity o = originalOpps[0];
        string closedstage = [select masterlabel from opportunitystage where isActive = true and iswon = true and isClosed = true limit 1].masterlabel;
        o.StageName = closedstage;
        o.CloseDate = system.today();
        Test.startTest();
        //update opp
        update o;
        //call the update method
        RD_RecurringDonations.evaluateRecurringDonationsForNewOppInsert(new list<npe03__Recurring_Donation__c>{r1});
        Test.stopTest();        
        
        npe03__Recurring_Donation__c rd = [select npe03__Last_Payment_Date__c from npe03__Recurring_Donation__c where id = :r1.id];     
        
        system.assertEquals(0, [select count() from Opportunity where npe03__Recurring_Donation__c = :r1.id and isClosed = false]);
        system.assertEquals(system.today(), rd.npe03__Last_Payment_Date__c);
    }

    /*********************************************************************************************************
    @description
        Unit test for utility method to see if substantive changes were made to a Recurring Donation
        requiring schedule recalculation
    **********************************************************************************************************/
    static testMethod void testNeedsRecalculation() {
        Account a1 = new Account();
        a1.Name = 'testNeedsRecalculation';
        insert a1;

        Contact c1 = UTIL_UnitTestData_TEST.getContact();
        c1.AccountId = a1.Id;
        insert c1;

        Account a2 = new Account();
        a2.Name = 'Test Acc 2';
        insert a2;

        Contact c2 = UTIL_UnitTestData_TEST.getContact();
        c2.AccountId = a2.Id;
        insert c2;

        npe03__Custom_Field_Mapping__c cfm = new npe03__Custom_Field_Mapping__c(
                npe03__Recurring_Donation_Field__c = 'Name',
                npe03__Opportunity_Field__c = 'Description',
                Name = 'CFMName00001-Test'
        );
        insert cfm;

        npe03__Recurring_Donation__c r1 = new npe03__Recurring_Donation__c();
        r1.Name = 'testNeedsRecalculation';
        r1.npe03__Installments__c = 2;
        r1.npe03__Organization__c = a1.id;
        r1.npe03__Amount__c = 100;
        r1.npe03__Installment_Period__c = 'TESTCIS';
        r1.npe03__Date_Established__c = date.newinstance(2000,1,1);
        r1.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationMultiplyValue;
        r1.npe03__Open_Ended_Status__c = system.label.npe03.RecurringDonationOpenStatus;
        r1.npe03__Next_Payment_Date__c = system.today().toStartOfMonth();
        r1.OwnerId = system.Userinfo.getUserId();

        npe03__Recurring_Donation__c r2 = r1.clone(false,false,false,false);
        // Exact match
        System.assertEquals(false,RD_RecurringDonations.needsRecalculation(r1,r2), 'These RDs should be an exact match.');

        r2 = r1.clone(false,false,false,false);
        r2.npe03__Date_Established__c = date.newinstance(2001,1,1);
        // "Date Established" is not a significant change that requires recalc
        System.assertEquals(false,RD_RecurringDonations.needsRecalculation(r1,r2), 'Updating the Date Established is not a significant change that requires recalculation');

        r2 = r1.clone(false,false,false,false);
        r2.npe03__Installments__c = 3;
        System.assertEquals(true,RD_RecurringDonations.needsRecalculation(r1,r2), 'Updating the Number of Installments is a significant change that should require recalculation.');

        r2 = r1.clone(false,false,false,false);
        r2.npe03__Organization__c = a2.id;
        System.assertEquals(true,RD_RecurringDonations.needsRecalculation(r1,r2), 'Updating the Account is a significant change that should require recalculation.');

        r2 = r1.clone(false,false,false,false);
        r2.npe03__Amount__c = 10;
        System.assertEquals(true,RD_RecurringDonations.needsRecalculation(r1,r2), 'Updating the Amount is a significant change that should require recalculation.');

        r2 = r1.clone(false,false,false,false);
        r2.npe03__Installment_Period__c = 'Quarterly';
        System.assertEquals(true,RD_RecurringDonations.needsRecalculation(r1,r2), 'Updating the Installment Period is a significant change that should require recalculation.');

        r2 = r1.clone(false,false,false,false);
        r2.npe03__Next_Payment_Date__c = system.today().toStartOfMonth().addDays(1);
        System.assertEquals(true,RD_RecurringDonations.needsRecalculation(r1,r2), 'Updating the Next Payment Date is a significant change that should require recalculation.');

        r2 = r1.clone(false,false,false,false);
        r2.npe03__Schedule_Type__c = system.label.npe03.RecurringDonationDivideValue;
        System.assertEquals(true,RD_RecurringDonations.needsRecalculation(r1,r2), 'Updating the Schedule Type is a significant change that should require recalculation.');

        r2 = r1.clone(false,false,false,false);
        r2.npe03__Open_Ended_Status__c = null;
        System.assertEquals(true,RD_RecurringDonations.needsRecalculation(r1,r2), 'Updating the Open Ended Status is a significant change that should require recalculation.');

        r2 = r1.clone(false,false,false,false);
        Campaign campaign = new Campaign(Name='Test Campaign', isActive=true);
        insert campaign;
        r2.npe03__Recurring_Donation_Campaign__c = campaign.Id;
        System.assertEquals(true,RD_RecurringDonations.needsRecalculation(r1,r2), 'Updating the Campaign is a significant change that should require recalculation.');

        r2 = r1.clone(false,false,false,false);
        r2.Always_Use_Last_Day_Of_Month__c = true;
        System.assertEquals(true,RD_RecurringDonations.needsRecalculation(r1,r2), 'Updating the Always Use Last Day of Month field is a significant change that should require recalculation.');

        r2 = r1.clone(false,false,false,false);
        r2.Name = 'Test2';
        // Name was included in a Custom Field Mapping, so it should trigger recalc
        System.assertEquals(true,RD_RecurringDonations.needsRecalculation(r1,r2), 'Name was included in a Custom Field Mapping, so updating Name is a significant change that should require recalculation.');

        //switch r1 from org to contact, then change the contact
        r1.npe03__Organization__c = null;
        r1.npe03__Contact__c = c1.Id;
        r2 = r1.clone(false,false,false,false);
        r2.npe03__Contact__c = c2.Id;
        System.assertEquals(true,RD_RecurringDonations.needsRecalculation(r1,r2), 'Updating the Contact is a significant change that should require recalculation.');

    }

    // Helpers
    ////////////

    /*********************************************************************************************************
    * @description Retrieve Primary Opportunity Contact Roles for specified Recurring Donations
    * @param rdIds Recurring Donation Ids
    * @return List<OpportunityContactRole>
    **********************************************************************************************************/
    private static List<OpportunityContactRole> getPrimaryOppContactRoles(Set<Id> rdIds) {
        List<OpportunityContactRole> ocrs = new List<OpportunityContactRole>([ 
            SELECT ContactId, OpportunityId, Role 
            FROM OpportunityContactRole 
            WHERE Opportunity.npe03__Recurring_Donation__c IN :rdIds AND 
            isPrimary = true
        ]);

        return ocrs == null ? new List<OpportunityContactRole>() : ocrs;
    }

    /*********************************************************************************************************
    * @description Assert that no errors have been logged
    * @return void
    **********************************************************************************************************/
    private static void assertNoErrors() {
        List<Error__c> errors = [SELECT Id, Full_Message__c FROM Error__c];
        System.assertEquals(errors.size(),0,errors);
    }
}